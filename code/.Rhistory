ages <- unique(country_training[,4])
forecasted_years <- 2006:2015
colnames(country_training) <- c('Country', 'Gender', 'Year', 'Age', 'Rate')
fitted_results <- list()
forecasted_results <- list()
View(country_training)
View(country_training)
View(country_training)
data_objects <- list()
fitted_results <- list()
forecasted_results <- list()
for (i in countries) {
for (j in genders) {
filtered <- country_training |>
filter(country_training[,1] == i & country_training[,2] == j)
mx_mat <- unlist(lapply(years, function(i) filtered[filtered[,3] == i, 5]))
mx_mat <- matrix(mx_mat, nrow = length(ages), ncol = length(years), byrow = FALSE)
colnames(mx_mat) <- years
#mx_mat[is.na(mx_mat)] <- 1e-6
#mx_mat[mx_mat == 0] <- 1e-6
Ext <- matrix(1, nrow = length(ages), ncol = length(years))
data <- demogdata(
data = mx_mat,
pop = Ext,
ages = ages,
years = years,
type = "mortality",
label = i,
name = j
)
list_name <- paste(i, j, sep = "_")
data_objects[[list_name]] <- data
}
}
View(data_objects)
data_objects[["50_0"]][["rate"]]
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
country_training <- read.table("../data/country_training.txt", header = FALSE)
countries <- unique(country_training[,1])
genders <- unique(country_training[,2])
years <- unique(country_training[,3])
ages <- unique(country_training[,4])
forecasted_years <- 2006:2015
colnames(country_training) <- c('Country', 'Gender', 'Year', 'Age', 'Rate')
data_objects <- list()
fitted_results <- list()
forecasted_results <- list()
for (i in countries) {
for (j in genders) {
filtered <- country_training |>
filter(country_training[,1] == i & country_training[,2] == j)
mx_mat <- unlist(lapply(years, function(i) filtered[filtered[,3] == i, 5]))
mx_mat <- matrix(mx_mat, nrow = length(ages), ncol = length(years), byrow = FALSE)
colnames(mx_mat) <- years
#mx_mat[is.na(mx_mat)] <- 1e-6
#mx_mat[mx_mat == 0] <- 1e-6
Ext <- matrix(1, nrow = length(ages), ncol = length(years))
data <- demogdata(
data = mx_mat,
pop = Ext,
ages = ages,
years = years,
type = "mortality",
label = i,
name = j
)
list_name <- paste(i, j, sep = "_")
data_objects[[list_name]] <- data
}
}
coherent_fits <- coherentfdm(data_objects)
for (i in countries) {
for (j in genders) {
filtered <- country_training |>
filter(country_training[,1] == i & country_training[,2] == j)
mx_mat <- unlist(lapply(years, function(i) filtered[filtered[,3] == i, 5]))
mx_mat <- matrix(mx_mat, nrow = length(ages), ncol = length(years), byrow = FALSE)
colnames(mx_mat) <- years
print(i)
print(j)
print(dim(mx_mat))
#mx_mat[is.na(mx_mat)] <- 1e-6
#mx_mat[mx_mat == 0] <- 1e-6
Ext <- matrix(1, nrow = length(ages), ncol = length(years))
data <- demogdata(
data = mx_mat,
pop = Ext,
ages = ages,
years = years,
type = "mortality",
label = i,
name = j
)
list_name <- paste(i, j, sep = "_")
data_objects[[list_name]] <- data
}
}
test_list <- list(data_objects[[1]])
coherent_fits <- coherentfdm(test_list)
for (i in countries) {
for (j in genders) {
filtered <- country_training |>
filter(country_training[,1] == i & country_training[,2] == j)
mx_mat <- unlist(lapply(years, function(i) filtered[filtered[,3] == i, 5]))
mx_mat <- matrix(mx_mat, nrow = length(ages), ncol = length(years), byrow = FALSE)
colnames(mx_mat) <- years
#mx_mat[is.na(mx_mat)] <- 1e-6
#mx_mat[mx_mat == 0] <- 1e-6
Ext <- matrix(1, nrow = length(ages), ncol = length(years))
data <- demogdata(
data = mx_mat,
pop = Ext,
ages = ages,
years = years,
type = "mortality",
label = i,
name = j
)
print(dim(data$rate))
list_name <- paste(i, j, sep = "_")
data_objects[[list_name]] <- data
}
}
for (i in countries) {
for (j in genders) {
filtered <- country_training |>
filter(country_training[,1] == i & country_training[,2] == j)
mx_mat <- unlist(lapply(years, function(i) filtered[filtered[,3] == i, 5]))
mx_mat <- matrix(mx_mat, nrow = length(ages), ncol = length(years), byrow = FALSE)
colnames(mx_mat) <- years
#mx_mat[is.na(mx_mat)] <- 1e-6
#mx_mat[mx_mat == 0] <- 1e-6
Ext <- matrix(1, nrow = length(ages), ncol = length(years))
data <- demogdata(
data = mx_mat,
pop = Ext,
ages = ages,
years = years,
type = "mortality",
label = i,
name = j
)
print(dim(data$rate[[1]]))
list_name <- paste(i, j, sep = "_")
data_objects[[list_name]] <- data
}
}
for (i in countries) {
for (j in genders) {
filtered <- country_training |>
filter(country_training[,1] == i & country_training[,2] == j)
mx_mat <- unlist(lapply(years, function(i) filtered[filtered[,3] == i, 5]))
mx_mat <- matrix(mx_mat, nrow = length(ages), ncol = length(years), byrow = FALSE)
colnames(mx_mat) <- years
#mx_mat[is.na(mx_mat)] <- 1e-6
#mx_mat[mx_mat == 0] <- 1e-6
Ext <- matrix(1, nrow = length(ages), ncol = length(years))
print(dim(Ext))
data <- demogdata(
data = mx_mat,
pop = Ext,
ages = ages,
years = years,
type = "mortality",
label = i,
name = j
)
print(dim(data$rate[[1]]))
list_name <- paste(i, j, sep = "_")
data_objects[[list_name]] <- data
}
}
for (i in countries) {
for (j in genders) {
filtered <- country_training |>
filter(country_training[,1] == i & country_training[,2] == j)
mx_mat <- unlist(lapply(years, function(i) filtered[filtered[,3] == i, 5]))
mx_mat <- matrix(mx_mat, nrow = length(ages), ncol = length(years), byrow = FALSE)
colnames(mx_mat) <- years
mx_mat[is.na(mx_mat)] <- 9e-6
mx_mat[mx_mat == 0] <- 9e-6
Ext <- matrix(1, nrow = length(ages), ncol = length(years))
print(dim(Ext))
data <- demogdata(
data = mx_mat,
pop = Ext,
ages = ages,
years = years,
type = "mortality",
label = i,
name = j
)
print(dim(data$rate[[1]]))
list_name <- paste(i, j, sep = "_")
data_objects[[list_name]] <- data
}
}
test_list <- list(data_objects[[1]])
coherent_fits <- coherentfdm(test_list)
test_list[[1]]$rate[[1]]
test_list$rate[[1]]
for (i in countries) {
for (j in genders) {
# Filter the data for the current country and gender.
filtered <- country_training |>
filter(country_training[, 1] == i & country_training[, 2] == j)
# Extract the rate data for each year.
mx_vec <- unlist(lapply(years, function(y) {
filtered[filtered[, 3] == y, 5]
}))
# Reshape the vector into a matrix with ages as rows and years as columns.
mx_mat <- matrix(mx_vec, nrow = length(ages), ncol = length(years), byrow = FALSE)
colnames(mx_mat) <- years
# Impute missing values or zeros if needed.
mx_mat[is.na(mx_mat)] <- 9e-6
mx_mat[mx_mat == 0] <- 9e-6
# Create a corresponding population matrix (here, just ones for illustration).
Ext <- matrix(1, nrow = length(ages), ncol = length(years))
# Create a unique name for this sub-series.
list_name <- paste(i, j, sep = "_")
# Store the matrices and the label.
rates_list[[list_name]] <- mx_mat
pops_list[[list_name]]  <- Ext
labels_list <- c(labels_list, list_name)
}
}
rates_list <- list()
pops_list <- list()
labels_list <- c()
for (i in countries) {
for (j in genders) {
# Filter the data for the current country and gender.
filtered <- country_training |>
filter(country_training[, 1] == i & country_training[, 2] == j)
# Extract the rate data for each year.
mx_vec <- unlist(lapply(years, function(y) {
filtered[filtered[, 3] == y, 5]
}))
# Reshape the vector into a matrix with ages as rows and years as columns.
mx_mat <- matrix(mx_vec, nrow = length(ages), ncol = length(years), byrow = FALSE)
colnames(mx_mat) <- years
# Impute missing values or zeros if needed.
mx_mat[is.na(mx_mat)] <- 9e-6
mx_mat[mx_mat == 0] <- 9e-6
# Create a corresponding population matrix (here, just ones for illustration).
Ext <- matrix(1, nrow = length(ages), ncol = length(years))
# Create a unique name for this sub-series.
list_name <- paste(i, j, sep = "_")
# Store the matrices and the label.
rates_list[[list_name]] <- mx_mat
pops_list[[list_name]]  <- Ext
labels_list <- c(labels_list, list_name)
}
}
coherent_data <- demogdata(
data = rates_list,
pop = pops_list,
ages = ages,
years = years,
type = "mortality",
label = "All Countries and Genders",
name = labels_list
)
View(rates_list)
View(pops_list)
View(test_list)
combined_objects <- do.call(combine.demogdata, data_objects)
View(data_objects)
combined_objects <- do.call(combine.demogdata, unname(data_objects))
combined_data <- Reduce(combine.demogdata, unname(data_objects))
View(data_objects)
combined_data <- data_objects[[1]]
combined_data$rate <- lapply(data_objects, function(x) x$rate[[1]])
combined_data$pop  <- lapply(data_objects, function(x) x$pop[[1]])
View(combined_data)
coherent_fits <- coherentfdm(combined_data)
View(coherent_fits)
View(coherent_fits)
# forecasts
coherent_forecasts <- forecast(coherent_fits, h=10, level=95)
# forecasts
coherent_forecasts <- forecast(coherent_fits, h=10, level=95, method="ML")
# forecasts
coherent_forecasts <- forecast(coherent_fits, h=10, drange=c(0,0.25))
# forecasts
coherent_forecasts <- forecast(coherent_fits, h=10, drange=c(0,0.1))
# forecasts
coherent_forecasts <- forecast(coherent_fits, h=10, drange=c(0,0.1))
# forecasts
coherent_forecasts <- forecast(coherent_fits, h=10, drange=c(0,0.01))
# forecasts
coherent_forecasts <- forecast(coherent_fits, h=10, drange=c(0,1))
# forecasts
coherent_forecasts <- forecast(coherent_fits, h=10, drange=c(0,5))
# forecasts
coherent_forecasts <- forecast(coherent_fits, h=10, drange=c(0,3))
# forecasts
coherent_forecasts <- forecast(coherent_fits, h=10, drange=c(0,2))
# forecasts
coherent_forecasts <- forecast(coherent_fits, h=10, drange=c(0,2))
# forecasts
coherent_forecasts <- forecast(coherent_fits, h=10, drange=c(0,1))
# forecasts
coherent_forecasts <- forecast(coherent_fits, h=10, drange=c(0,1), method="ML")
# forecasts
coherent_forecasts <- forecast(coherent_fits, h=10, drange=c(0,0.5))
View(coherent_forecasts)
View(coherent_forecasts)
View(coherent_fits)
exp(-.4)
View(data_objects)
data_objects$`50_0`$pop[[1]]
View(combined_data)
combined_data <- data_objects[[1]]
combined_data$rate <- lapply(data_objects, function(x) x$rate[[1]])
# fits
coherent_fits <- coherentfdm(combined_data)
combined_data$pop  <- lapply(data_objects, function(x) x$pop[[1]])
plot(residuals(coherent_fits$product))
plot(residuals(coherent_fits$product))
plot(residuals(coherent_forecasts$product))
plot(residuals(coherent_fits$ratio))
plot(residuals(coherent_fits$ratio$`50_0`))
plot(residuals(coherent_fits$ratio$`87_0`))
plot(coherent_forecasts$product, 'c', comp=2)
plot(coherent_fits$product$y, col='gray', ylim=c(-11,-0.5),
main="Mortality forecasts product: 2010-2059")
lines(coherent_forecasts$product)
plot(coherent_forecasts$ratio$male, 'c', comp=2)
plot(coherent_forecasts$ratio$`87_0`, 'c', comp=2)
plot(coherent_fits$ratio$`87_0`$y,col='gray',
main="Mortality forecasts ratio (M/F): 2010-2059")
lines(cohere
View(coherent_fits)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
country_training <- read.table("../data/country_training.txt", header = FALSE)
countries <- unique(country_training[,1])
genders <- unique(country_training[,2])
years <- unique(country_training[,3])
ages <- unique(country_training[,4])
forecasted_years <- 2006:2015
colnames(country_training) <- c('Country', 'Gender', 'Year', 'Age', 'Rate')
fitted_results <- list()
forecasted_results <- list()
for (i in countries) {
for (j in genders) {
filtered <- country_training |>
filter(country_training[,1] == i & country_training[,2] == j)
mx_mat <- unlist(lapply(years, function(i) filtered[filtered[,3] == i, 5]))
mx_mat <- matrix(mx_mat, nrow = length(ages), ncol = length(years), byrow = FALSE)
colnames(mx_mat) <- years
#mx_mat[is.na(mx_mat)] <- 1e-6
#mx_mat[mx_mat == 0] <- 1e-6
Ext <- matrix(1, nrow = length(ages), ncol = length(years))
data <- demogdata(
data = mx_mat,
pop = Ext,
ages = ages,
years = years,
type = "mortality",
label = i,
name = j
)
print(data)
lc_output <- lca(data,
series = j,
ages = ages,
years = years,
adjust = "e0",
interpolate = TRUE)
for (i in countries) {
for (j in genders) {
filtered <- country_training |>
filter(country_training[,1] == i & country_training[,2] == j)
mx_mat <- unlist(lapply(years, function(i) filtered[filtered[,3] == i, 5]))
mx_mat <- matrix(mx_mat, nrow = length(ages), ncol = length(years), byrow = FALSE)
colnames(mx_mat) <- years
#mx_mat[is.na(mx_mat)] <- 1e-6
#mx_mat[mx_mat == 0] <- 1e-6
Ext <- matrix(1, nrow = length(ages), ncol = length(years))
data <- demogdata(
data = mx_mat,
pop = Ext,
ages = ages,
years = years,
type = "mortality",
label = i,
name = j
)
print(data)
lc_output <- lca(data,
series = j,
ages = ages,
years = years,
adjust = "e0",
interpolate = TRUE)
fitted <- exp(lc_output$fitted$y)
df_fitted <- as.data.frame(fitted)
df_fitted$age <- ages
df_fitted_long <- melt(df_fitted, id.vars = "age",
variable.name = "year",
value.name = "rate")
df_fitted_long$year <- rep(years, each = length(ages))
df_fitted_long$country <- i
df_fitted_long$gender <- j
fitted_results[[paste(i, j, sep = "_")]] <- df_fitted_long
forecasted <- forecast(lc_output, h=10, jumpchoice = "actual")
forecasted_rates <- do.call(cbind, forecasted$rate[1])
df_forecasted <- as.data.frame(forecasted_rates)
df_forecasted$age <- ages
df_forecasted_long <- melt(df_forecasted, id.vars = "age",
variable.name = "year",
value.name = "rate")
df_forecasted_long$year <- rep(forecasted_years, each = length(ages))
df_forecasted_long$country <- i
df_forecasted_long$gender <- j
forecasted_results[[paste(i, j, sep = "_")]] <- df_forecasted_long
}
}
}}
View(lc_output)
View(coherent_fits)
# save fitted rates
df_fitted <- as.data.frame(exp(coherent_fits$product$fitted$y))
View(df_fitted)
df_fitted$age <- ages
df_fitted_long <- melt(df_fitted, id.vars = "age",
variable.name = "year",
value.name = "rate")
df_fitted_long$year <- rep(years, each = length(ages))
View(coherent_fits)
View(coherent_forecasts)
# save forecasted results
forecasted_rates <- do.call(cbind, coherent_forecasts$rate[1])
View(forecasted)
# save forecasted results
for (i in 1:78) {
forecasted_rates <- do.call(cbind, coherent_forecasts[[i]]$rate[1])
}
# save forecasted results
#for (i in 1:78) {
forecasted_rates <- do.call(cbind, coherent_forecasts$rate[[1]])
View(coherent_forecasts)
View(coherent_forecasts)
# save forecasted results
for (i in 1:78) {
forecasted_rates <- do.call(cbind, coherent_forecasts[[i]]$rate[[1]])
}
# save forecasted results
forecasted_rates <- list()
for (i in 1:78) {
forecasted_rates[[i]] <- coherent_forecasts[[i]]$rate[[1]]
}
View(df_forecasted)
# save forecasted results
forecasted_rates <- list()
View(forecasted_rates)
for (i in 1:78) {
forecasted_rates[[i]] <- coherent_forecasts[[i]]$rate[[1]]
}
View(forecasted_rates)
View(forecasted_rates)
df_forecasted <- as.data.frame(forecasted_rates)
View(df_forecasted)
names(forecasted_rates)
View(forecasted_rates)
names(coherent_forecasts)
names(coherent_forecasts[[i]])
df_forecasted_long$label <- names(coherent_forecasts[i])
names(coherent_forecasts[i])
names(coherent_forecasts[1])
forecasted_rates <- list()
forecasted_results <- list()
for (i in 1:76) {
forecasted_rates[[i]] <- coherent_forecasts[[i]]$rate[[1]]
df_forecasted <- as.data.frame(forecasted_rates[[i]])
df_forecasted$age <- ages
df_forecasted_long <- melt(df_forecasted, id.vars = "age",
variable.name = "year",
value.name = "rate")
df_forecasted_long$year <- rep(forecasted_years, each = length(ages))
df_forecasted_long$label <- names(coherent_forecasts[i])
forecasted_results[[i]] <- df_forecasted_long
}
View(forecasted_results)
final_forecasted_df <- bind_rows(forecasted_results)
View(final_forecasted_df)
View(data_objects)
for (i in 1:76) {
forecasted_rates[[i]] <- coherent_forecasts[[i]]$rate[[1]]
df_forecasted <- as.data.frame(forecasted_rates[[i]])
df_forecasted$age <- ages
df_forecasted_long <- melt(df_forecasted, id.vars = "age",
variable.name = "year",
value.name = "rate")
df_forecasted_long$year <- rep(forecasted_years, each = length(ages))
# Extract country and gender from names
label_split <- strsplit(names(coherent_forecasts[i]), "_")[[1]]
df_forecasted_long$country <- as.numeric(label_split[1])
df_forecasted_long$gender <- as.numeric(label_split[2])
forecasted_results[[i]] <- df_forecasted_long
}
View(forecasted_rates)
View(forecasted_results)
final_forecasted_df <- bind_rows(forecasted_results)
final_forecasted_df <- final_forecasted_df |>
select(country, gender, year, age, rate)
View(final_forecasted_df)
write.table(final_forecasted_df, "../data/coherent_forecast_all.csv", sep=",",
col.names = FALSE, row.names = FALSE)
View(forecasted_results)
View(final_forecasted_df)
